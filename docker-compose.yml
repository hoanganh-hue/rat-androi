# DogeRat Web Admin - Docker Compose Configuration
# Production-ready with Zero-Trust security

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: dogerat-db
    environment:
      POSTGRES_DB: ${DB_NAME:-dogerat}
      POSTGRES_USER: ${DB_USER:-dogerat}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dogerat}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dogerat-network

  # Backend Server
  server:
    build:
      context: .
      dockerfile: server/Dockerfile
    container_name: dogerat-server
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${DB_USER:-dogerat}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-dogerat}
      DB_TYPE: postgres
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      JWT_EXPIRY: ${JWT_EXPIRY:-24h}
      CORS_ORIGIN: ${CORS_ORIGIN}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@dogerat.local}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-Admin@123456}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    ports:
      - "${SERVER_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - dogerat-network

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: dogerat-client
    ports:
      - "${CLIENT_PORT:-80}:80"
    depends_on:
      - server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - dogerat-network

  # OPTIONAL: Cloudflare Tunnel (Zero-Trust alternative to ngrok)
  # Uncomment to enable secure tunnel with authentication
  # cloudflared:
  #   image: cloudflare/cloudflared:latest
  #   container_name: dogerat-cloudflared
  #   command: tunnel --config /etc/cloudflared/config.yml run
  #   volumes:
  #     - ./cloudflared.yml:/etc/cloudflared/config.yml:ro
  #     - ./cloudflared-credentials.json:/etc/cloudflared/credentials.json:ro
  #   depends_on:
  #     - server
  #   restart: unless-stopped
  #   networks:
  #     - dogerat-network

  # DEPRECATED: ngrok tunnel (removed for security)
  # Use Cloudflare Tunnel, Tailscale, or mTLS reverse proxy instead
  # ngrok:
  #   ⚠️ SECURITY WARNING: ngrok provides anonymous public access
  #   ⚠️ Use Zero-Trust alternatives (see cloudflared above or docker-compose.tailscale.yml)

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local

networks:
  dogerat-network:
    driver: bridge

# Zero-Trust Deployment Options:
# 
# 1. Cloudflare Tunnel (recommended):
#    - Uncomment cloudflared service above
#    - Configure cloudflared.yml with your tunnel credentials
#    - Benefits: mTLS, OIDC/SSO auth, WAF, access logs
#
# 2. Tailscale (see docker-compose.tailscale.yml):
#    - Ideal for private mesh networks
#    - Benefits: WireGuard encryption, ACLs, MagicDNS
#
# 3. Reverse Proxy with mTLS:
#    - Use nginx/traefik with client certificate authentication
#    - Benefits: Full control, on-premise deployment
#
# 4. API Gateway (enterprise):
#    - Kong, AWS API Gateway, Azure API Management
#    - Benefits: Rate limiting, transformation, monitoring
